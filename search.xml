<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[SSL技术原理及应用-网络信息安全（一）]]></title>
    <url>%2F2019%2F03%2F25%2FSSL%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[Unix-IO概述]]></title>
    <url>%2F2018%2F03%2F14%2FUnix-IO%E6%A6%82%E8%BF%B0%2F</url>
    <content type="text"><![CDATA[Devices的表现形式 在Unix系统中，一个文件存储为若干个字节的序列。包括网络适配器、磁盘和终端等设备都被描述为文件。所所有输入输出动作的执行都是通过对这些文件适当的读写实现的。正是因为这些从设备到文件的映射，允许系统内核对位提供一些简单低级的应用程序接口。例如Unix I/O 使得应用程序的输入输出可以使用一种统一的方式执行。 Unix IO可以完成的操作 Opening Files：应用程序需要通过请求系统内核访问对应的IO设备，以完成打开文件的相应操作。系统内核返回一个描述符，该描述符为较小的非负整数，用来在后续的所有的文件操作中标识该文件。内核会保持跟踪打开文件的所有信息，应用程序只需要关注该文件描述符。 Linux shell创建的每个进程都以三个打开的文件开始：standard input(descriptor 0)、standard output(descriptor 1) and standard error(descriptor 2)， Changing the currentfile position：内核为每个打开的文件维护一个文件位置，初始值为0。这个位置是]]></content>
      <categories>
        <category>Unix</category>
      </categories>
      <tags>
        <tag>Unix I/O</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JPA持久化persistence.xml配置文件及参数详解]]></title>
    <url>%2F2017%2F03%2F14%2FJPA%E6%8C%81%E4%B9%85%E5%8C%96persistence-xml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8F%8A%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[概念 JPA是Java Persistence API的简称，中文名Java持久层API，是JDK 5.0注解或XML描述对象－关系表的映射关系，并将运行期的实体对象持久化到数据库中。 JPA包括以下三个方面的技术：1、 ORM映射元数据 JPA支持XML和JDK注解两种元数据的形式，元数据描述对象和表之间的映射关系，框架据此景实体对象持久化到数据库表中2、API 用来操作实体对象，执行CRUD操作，框架在后台代替我们完成所有的事情，开发者能够从繁琐的JDBC和SQL代码中解放出来3、查询语言 通过面向对象数据库的查询语言查询数据，避免程序的SQL语句的高度耦合 持久化单元的具有的属性:1、该持久性单元内的实体类2、为上述实体类提供持久性支持的提供者或库 JPA实现，能够为应用提供持久性对象的库。3、上述实体类的数据源 是指提供实体类存储的数据库。数据源必须在服务器中注册并且使用JNDI名称指定。如果事务是由容器管理的JTA事务， 那么数据源就必须是JTA数据源，如果事务是由应用负责管理，那么数据源就必须是JDBC连接指定。4、应用使用的事务类型12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;persistence&gt; version = "2.1" xmlns = "http://xmlns.jcp.org/xml/ns/persistence" xmlns = "http://www.w3.org/2001/XMLSchema-instance" xsi:shemaLocation = "http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence_2_1.xsd" &lt;!--配置持久化单元--&gt; &lt;persistence_unit name = "HelloWorldPU"&gt; &lt;!--数据库连接 Jta-data-source和 non-jta-data-source用于分别指定持久化提供商使用的JTA和/或non-JTA数据源的全局JNDI名称(可选)--&gt; &lt;jta-data-source&gt;myDS&lt;/jta-data-source&gt; &lt;!-- 声明orm.xml所在位置.即指定映射文件 (可选) --&gt; &lt;mapping-file&gt;product.xml&lt;/mapping-file&gt; &lt;!-- 以包含persistence.xml的jar文件为基准的相对路径,添加额外的jar文件.指定托管类的附加JAR(可选) --&gt; &lt;jar-file&gt;../lib/model.jar&lt;/jar-file&gt; &lt;!--持久化类--&gt; &lt;class&gt;com.lzb.mitan&lt;/class&gt; &lt;!--为映射的类禁用扫描--&gt; &lt;exclude-unlisted-classes&gt;true&lt;/exclude-unlisted-classes&gt; &lt;!--设置属性--&gt; &lt;properties&gt; &lt;!--自动输出schema创建DDL语句 value的值可以是 create-drop / create / update 值得注意的是create-drop他会在SESSION关闭后删除所有表开启式再创建。 --&gt; &lt;property name="hibernate.hbm2ddl.auto" value="update" /&gt; &lt;property name="hibernate.show_sql" value="true" /&gt; &lt;!--删除/重建SQL架构--&gt; &lt;property name = "javax.persistence.schema-generation.database.action" value = "drop-and-create"/&gt; &lt;!--格式化SQL--&gt; &lt;property name = "hibernate.format_sql" value = "true"/&gt; &lt;property name = "hibernate.use_sql_comments" value = "true"/&gt; &lt;/properties&gt; &lt;/persistence_unit&gt;&lt;/persistence&gt; 持久化单元能够被打包成war文件，作用域取决于persistence.xml的位置。注意：persistence.xml文件的位置决定持久性的根——jar文件或者是包含META-INF的目录]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>jpa</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hibernate实体类编写规则与主键生成策略]]></title>
    <url>%2F2017%2F03%2F13%2FHibernate%E4%B8%BB%E9%94%AE%E7%94%9F%E6%88%90%E7%AD%96%E7%95%A5%2F</url>
    <content type="text"><![CDATA[实体类的编写规则 类中的属性是私有的 属性需要使用公开的set和get方法操作 类必须要有一个属性作为唯一值，我们一般使用Id作为这个唯一值 类中的属性不建议使用基本数据类型，一般使用数据类型对应的包装类 java中的基本类型对应的包装类分别是： byte–&gt;Byte、short–&gt;Short、 int–&gt;Integer、long–&gt;Long等 为什么会有这样一种建议呢？使用一个简单的例子进行说明： 老师在阅卷完成之后需要需要登记学生的分数，如果使用int类型的数据来记录分时，那么在这种情况下将不能表示缺考学生的成绩标记，因为Java中int类型的数据不为null，它的默认值为0，相关的代码示例如下：123456789public class User2 &#123; private Integer id; public Integer getId() &#123; return id; &#125; public void setId(Integer id) &#123; this.id = id; &#125;&#125; hibernate主键生成策略hibernate中要求实体类中有一个属性值作为唯一值来对应表中的主键，而主键具有多种生成策略，具体的分类如下： assigned 主键由外部德生序负责产生，在调用hibernate的save()方法之前必须指定一个。hibernate不负责维护主键生成，与hibernate以及底层的数据库都没有任何关系，可以跨数据库，人为进行控制主键生成。在存储对象的时候，必须使用主键的setter()方法给主键赋值，这种方法应该尽量避免，相关代码示例如下： 123&lt;id name="id" column="id"&gt; &lt;generator class="assigned" /&gt; &lt;/id&gt; increment 用于long、short、int等整数类型，由hibernate自发的以递增的方式生成唯一标识，每一次的增量为1，只有当没有其他进程向同一表中插入数据的时候才能使用，不能在集群的环境下使用。适用于代理主键。相关的代码示例如下： 123&lt;id name="id" column="id"&gt; &lt;generator class="increment" /&gt; &lt;/id&gt; hilo hilo是hibernate中最常用的一种生成方式，需要一张额外的表保存hi的值。保存hi值的表至少有一条记录(只根本第一条记录有关)，否则会出现错误。使用该方式可以跨数据库 hilo生成主键的过程(以hibernate_unique_key表，next_hi列为例)： 1) 获取hi值：读取并记录数据库的hibernate_unique_key表中的next_hi字段的值，数据库中此字段的值加1保存 2) 获得lo值：从0到max_lo循环取值，差值为1，当值为max_lo时，重新获取hi值，然后lo值继续从0到max_lo循环 3) 根据公式 hi*(max_lo + 1) + lo 计算生成主键值 注意 ：当hi值是0的时候，那么第一个值不是 0*(max_lo + 1) + 0，而是lo跳过0从1开始 问题：max_lo 配置为多大合适？ 这是根据具体的情况而定，如果系统一般不重启，而且需要用此表建立大量的主键，可以把 max_lo 配置较大一点，减少读取表的次数，提高效率；反之，如果服务器经常重启，可以把 max_lo 设置小一点，避免每次重启导致主键值不连贯。具体的代码示例如下： 12345678&lt;id name="id" column="id"&gt; &lt;generator class="hilo"&gt; &lt;param name="table"&gt;hibernate_hilo&lt;/param&gt;&lt;!--指定保存hi值的表名--&gt; &lt;param name="column"&gt;next_hi&lt;/param&gt;&lt;!--指定保存hi值的列名--&gt; &lt;param name="max_lo"&gt;100&lt;/param&gt;&lt;!--指定低位的最大值--&gt; &lt;/generator&gt; &lt;/id&gt; &lt;!--也可以省略table和column配置，其默认的表为hibernate_unique_key，列为next_hi--&gt; seqhilo 与hilo类似，通过hi/lo算法实现主键生成实例，只是将hilo中的数据表换成了序列sequence，需要数据库中创建sequence，适用于支持序列类型的数据库。具体代码如下： 123456&lt;id name="id" column="id"&gt; &lt;generator class="seqhilo"&gt; &lt;param name="sequence"&gt;hibernate_seq&lt;/param&gt; &lt;param name="max_lo"&gt;100&lt;/param&gt; &lt;/generator&gt; &lt;/id&gt; sequence hibernate根据底层数据库序列生成标识符，条件是数据库支持序列，代码示例如下： 123&lt;generator class="sequence"&gt; &lt;param name="sequence"&gt;hibernate_id&lt;/param&gt;&lt;!--指定sequence的名称--&gt;&lt;/generator&gt; identity 采用底层数据库本身提供的主键生成标识符。identity是由数据库自己生成的，这个主键必须设置为自增长，只有满足该条件的数据库能使用 native native是由hibernate根据使用的数据库自行判断采用identity、hilo、sequence其中的一种作为主键生成方式，灵活性很高 uuid 采用128位的UUID生成算法。该算法能够在网络环境中生成唯一的标识符，被编码为一个长度为32位的十六进制字符串，但是由于字符串类型的主键比整型的主键要占用更多的空间，并不是很流行，适用于代理主键 guid Globally Unique Identifier全球唯一标识符，也称作 UUID，是一个128位长的数字，用16进制表示。算法的核心思想是结合机器的网卡、当地时间、一个随即数来生成GUID。从理论上讲，如果一台机器每秒产生10000000个GUID，则可以保证（概率意义上）3240年不重复。 foreign 使用另外一个相关联的对象的主键作为该对象主键。主要用于一对一关系中。具体代码示例如下： 12345&lt;id name="id" column="id"&gt; &lt;generator class="foreign"&gt; &lt;param name="property"&gt;user&lt;/param&gt; &lt;/generator&gt; &lt;/id&gt; &lt;one-to-one name="user" class="domain.User" constrained="true" /&gt; select 使用触发器生成主键，主要用于早起的数据库生成机制，能用到的地方非常少]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>hibernate</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[体系结构-计算机网络（二）]]></title>
    <url>%2F2016%2F03%2F25%2F%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[基本概念与数据交换-计算机网络（一）]]></title>
    <url>%2F2016%2F03%2F24%2F%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%95%B0%E6%8D%AE%E4%BA%A4%E6%8D%A2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[计算机网络，通常也被简称为网络，是利用通信设备和线路与将地理位置不同的、功能独立的多个计算机系统连接起来，以功能完善的网络软件实现网路偶的硬件、软件及资源的共享和信息传递的系统。简单来说，就是连接两台或者多台计算机进行通信的系统。在了解计算机网络之前，需要了解一下互联网的基本概念。 互联网的基本概念互联网的基本特点 计算机网络具有两个鲜明的特点： 1、连通性。所谓连通性就是互联网使得上网用户之间，不管相距多远，都可以很便捷、非常经济的交换各种信息，就好像是这些终端的用户始终是连接在一起的。 2、共享。共享就是资源共享，可以是信息共享、软件共享、也可以是硬件共享。由于网络的存在，我们就好像这些资源始终在我们身边。 互联网的负面影响 计算机病毒的大四传播，破坏互联网上数据的正常传送和交换 犯罪分子利用互联网获取国家机密和盗窃银行 网上欺诈和在网络上肆意的传播谣言、不良信息 青少年沉迷于网络游戏相较于互联网的好处，这些负面影响还是次要的 网络的网络 计算机的网络由若干个节点（node）和连接这些节点的链路组成，而网络和网络之间又可以用路由器连接起来，这样就构成了一个范围更大的网络，因此互联网就是一个网络的网络。 互联网的组成 互联网主要由两个部分组成：边缘部分和核心部分。他们在概念上和实际上都有明确的区别和分工 边缘部分 在所有连接在互联网的主机组成。边缘部分是用户直接使用的，用来进行通信（传送数据、音频、视频等）和资源共享。他们的连接方式大致上可以分为两种： 客户-服务器方式 这是在互联网上最常用的，也是最为传统的方式，我们在上网发送电子邮件或在网上查找资料的时候，都是使用的客户—服务器的方式。客户是服务的请求方，服务器是服务的提供方。它需要两类程序支持双方的通信1) 客户程序 不需要特殊的硬件和很复杂的操作系统，被用户调用后运行，在通信的时候主动的向远地的服务器发起通信（请求服务）。因此客户端必须知道服务器的地址。2) 服务器程序 服务器程序是一种专门用来提供某种服务的程序，可同时处理多个远地或本地客户的请求。系统启动后即自动调用并不断的运行着，被动的等待并接受来自各地服务器的客户通信请求，因此服务器不需要知道客户端的地址。一般需要有强大的硬件和高级的操作系统支持 对等连接方式 简写为P2P，是指不管两台主机在通信时并不区分哪一个服务请求方，哪一个是服务提供方。只要两台主机都运行了对等连接软件（P2P软件），它们就能进行平等的、对等的连接和通信，在这个时候，双方都能下载对方存储在硬盘中的共享文档，这种方式我们称之为P2P连接方式 核心部分 由大量的网络连接以及连接这些网络的路由器组成。这些部分是为了给边缘部分提供服务的（提供连通性和交换） 网络核心是互联网中最为复杂的部分，其中起特殊作用的是路由器，它是一种换用计算机（但是不叫做主机），路由器是实现分组交换的关键构件，其任务是转发收到的分组，这是网络核心最重要的功能 休息一下，养养眼！！！ 计算机网路数据交换形式电路交换 互联网是从电话网网络交换演变而来的，最早的互联网使用的电路交换，它主要有以下几个特点： 交换。按照某种方式动态的分配传输线路的资源 拨号。在使用电路交换之前，必须先拨号请求建立连接 建立连接。当被叫用户听到交换机送来的振铃并摘机之后，操那个主叫端到被叫端就建立了一条专用的物理通路，这条链接就保证了双方通话时所需的通信资源 通话。在通话阶段，始终占用通信资源。 释放连接。归还通信资源 不足： 电路交换平均建立时间对计算机通信来说较长。建立连接之后物理通路就被通信双方独占，，即便是通信线路空闲，也不能由其他用户使用。通信线路的使用率较低。同时，在电路交换中，不同类型、不同规格、不同速率的终端很难进行通信，在通信过程中也难以实现差错控制。 分组交换 分组交换是是以分组为单位进行传输和交换的，它是一种存储-转发交换的方式，即将到达交换机的分组先送到存储器暂时存储和处理，等到相应的输出电路有空闲时在送出，它具备以下几个特点： 分组交换采用存储转发技术。表示讲一个较长的数据划分为几个组之后再进行传送。我们通常将要发送的整块数据成为一个报文，将报文划分为若干个较小的数据段之后添加由必要控制信息组成的首部（又称为包头）后，就构成了一个分组，又称为包。包（分组）是互联网中传送的数据单元 主机是为了给用户进行信息处理的，并且可以和其他主机通过网络进行信息的交换。路由器用来转发分组的，进行分组交换。路由器收到分组之后，暂时存储，检查分组信息的首部，按照首部中的地址查找转发表找到合适的接口转发出去 我们通常把单个的网络简化成为一条链路，路由器是核心部分的结点。当某个结点发生故障的时候，路由器中运行的路由选择协议能够找到最合适的路径。 总体上来讲，分组交换具有高效、灵活、迅速、可靠的优点，但是由于存储转发需要排队，会造成一定的排队时延。 电路交换和分组交换的区别 分组交换是保温分成若干个分组之后每单个分组传输到相邻节点上查找存储转发表转发到下一个节点，最终转发到接收方、而电路交换则是整个报文的比特流总源点直达终点，非常依赖实质性的物理线路。 使用场景 若要传输突发性的数据，使用分组交换和报文交换可以提高整个信道的利用率，因为报文交换和分组交换不需要预先分配带宽，不要胡斐大量的时间来建立连接。 若要连续传输大量的数据，且其传输时间远远大于连接建立的时间，那么电路交换将会是更好的选择]]></content>
      <categories>
        <category>computer network</category>
      </categories>
      <tags>
        <tag>Network Model</tag>
        <tag>Packet switching</tag>
      </tags>
  </entry>
</search>
